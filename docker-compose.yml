services:
  milvus-etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/data
    command: minio server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.4
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: milvus-minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "milvus-etcd"
      - "milvus-minio"

  rag-chatbot:
    build: .
    container_name: rag-chatbot
    environment:
      - MILVUS_HOST=milvus-standalone
      - MILVUS_PORT=19530
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TTS_SERVICE_URL=http://tts-service:8001
      - STT_SERVICE_URL=http://stt-service:8002
    volumes:
      - ./backend:/app/backend
      - ./docs:/app/docs
      - ./.env:/app/.env
    depends_on:
      milvus-standalone:
        condition: service_healthy
      tts-service:
        condition: service_healthy
      stt-service:
        condition: service_healthy
    ports:
      - "8000:8000"

  frontend:
    image: node:18-alpine
    container_name: rag-frontend
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "3000:3000"
    command: sh -c "npm install --no-audit && npm start"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - rag-chatbot
      
  # Add nginx reverse proxy to handle API requests
  # Base speech services image
  speech-base:
    build:
      context: ./speech_services
      dockerfile: Dockerfile.base
    image: dubula-speech-base:latest
    container_name: dubula-speech-base
    command: ["echo", "Base image built"]

  # Text-to-Speech Service with GPU acceleration
  tts-service:
    build:
      context: ./speech_services
      dockerfile: Dockerfile.tts
    container_name: dubula-tts
    depends_on:
      - speech-base
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "8001:8001"
    volumes:
      - tts_cache:/tmp/tts_cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 30s
      start_period: 120s
      retries: 3

  # Speech-to-Text Service with GPU acceleration  
  stt-service:
    build:
      context: ./speech_services
      dockerfile: Dockerfile.stt
    container_name: dubula-stt
    depends_on:
      - speech-base
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "8002:8002"
    volumes:
      - stt_cache:/tmp/stt_cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 30s
      start_period: 120s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: rag-nginx
    ports:
      - "80:80"
    depends_on:
      - frontend
      - rag-chatbot
      - tts-service
      - stt-service
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    restart: always

volumes:
  etcd_data:
  minio_data:
  milvus_data:
  frontend_node_modules:
  tts_cache:
  stt_cache: